<?xml version="1.0" encoding="UTF-8"?>
<project name="PHP Daemon" default="build">

    <autoloader autoloaderpath="vendor/autoload.php"/>

    <php expression="PhpDaemon\PhpDaemon::NAME" returnProperty="reports.title"/>
    <php expression="PhpDaemon\PhpDaemon::PACKET" returnProperty="file.title"/>
    <php expression="PhpDaemon\PhpDaemon::VERSION" returnProperty="version"/>

    <property name="dir.dist" value="dist"/>
    <property name="dir.temp" value="${dir.dist}/temp"/>
    <property name="dir.deb" value="${dir.dist}/deb"/>
    <property name="file.stub" value="stub/${file.title}.php"/>

    <fileset dir="${dir.temp}" id="testfiles">
        <include name="src/**/*.php"/>
    </fileset>

    <fileset dir="." id="buildfiles">
        <include name="bin/**/*"/>
        <include name="src/**/*"/>
        <include name="stub/**/*"/>
        <include name="composer.json"/>
        <include name="composer.lock"/>
        <include name="LICENSE"/>
    </fileset>

    <fileset dir="${dir.temp}" id="pharfiles">
        <include name="**/*"/>
        <exclude name="composer.json"/>
        <exclude name="composer.lock"/>
    </fileset>

    <property name="dir.report" value="${dir.dist}/report"/>
    <property name="dir.report.phpmd" value="${dir.report}/phpmd"/>
    <property name="dir.report.phpcs" value="${dir.report}/phpcs"/>
    <property name="dir.report.lint" value="${dir.report}/lint"/>
    <property name="dir.report.pdepend" value="${dir.report}/pdepend"/>
    <property name="dir.report.phpcpd" value="${dir.report}/phpcpd"/>
    <property name="dir.report.phploc" value="${dir.report}/phploc"/>
    <property name="dir.report.phpunit" value="${dir.report}/phpunit"/>

    <!-- clear:phpunit -->
    <target name="build"
            depends="
                bootstrap,
                composer,
                phar:create,
                deb:create,
                clear:temp,
                clear:lint,
                clear:phpunit"
    />

    <target name="report"
            depends="
                bootstrap,
                create:reports,
                clear:temp"
    />

    <target name="full"
            depends="
                bootstrap,
                create:reports,
                composer,
                phar:create,
                deb:create,
                clear:temp"
    />

    <target name="bootstrap"
            hidden="true"
            depends="
                precheck,
                make:dist,
                report:lint,
                report:phpunit"
    />

    <target name="create:reports"
            hidden="true"
            depends="
                report:phpmd,
                report:phpcs,
                report:pdepend,
                report:phploc,
                report:phpcpd"
    />

    <target name="precheck" hidden="true">
        <php expression="intval(ini_get('phar.readonly'));" returnProperty="phar.readonly"/>
        <if>
            <equals arg1="${phar.readonly}" arg2="true"/>
            <then>
                <fail msg="Modify php.ini:  phar.readonly = 0"/>
            </then>
        </if>
    </target>

    <target name="make:dist" depends="clear:dist" hidden="true">
        <mkdir dir="${dir.temp}"/>
        <copy todir="${dir.temp}">
            <fileset refid="buildfiles"/>
        </copy>
    </target>

    <target name="clear:dist" hidden="true">
        <phingcall target="delete:dir">
            <param name="dir.delete" value="${dir.dist}"/>
        </phingcall>
    </target>

    <target name="clear:temp" hidden="true">
        <phingcall target="delete:dir">
            <param name="dir.delete" value="${dir.temp}"/>
        </phingcall>
        <phingcall target="delete:dir">
            <param name="dir.delete" value="${dir.deb}"/>
        </phingcall>
    </target>

    <target name="clear:lint" hidden="true">
        <delete dir="${dir.report.lint}"/>
    </target>

    <target name="clear:phpunit" hidden="true">
        <delete dir="${dir.report.phpunit}"/>
    </target>

    <target name="delete:dir" hidden="true">
        <available file="${dir.delete}" property="is.dir" value="true"/>
        <if>
            <equals arg1="${is.dir}" arg2="true"/>
            <then>
                <!--                                                   -->
                <!-- https://github.com/phingofficial/phing/issues/556 -->
                <!--suppress PhingDomInspection                        -->
                <!--                                                   -->
                <chmod mode="777">
                    <fileset dir="${dir.delete}" defaultexcludes="false">
                        <include name="**/.git/**" />
                    </fileset>
                </chmod>
            </then>
        </if>
        <delete dir="${dir.delete}" includeemptydirs="true"/>
    </target>

    <target name="composer" hidden="true">
        <available file="composer.phar" property="file.composer.exists" value="true" />
        <if>
            <equals arg1="${file.composer.exists}" arg2="true"/>
            <then>
                <composer command="self-update"/>
            </then>
            <else>
                <httpget dir="." url="https://getcomposer.org/composer.phar" filename="composer.phar" sslVerifyPeer="false"/>
            </else>
        </if>
        <composer command="install">
            <arg value="--no-dev"/>
            <arg value="--optimize-autoloader"/>
            <arg value="--no-suggest"/>
            <arg value="--no-progress"/>
            <arg value="--working-dir"/>
            <arg value="${dir.temp}"/>
        </composer>
        <delete file="composer.phar"/>
    </target>

    <target name="phar:create" hidden="true">
        <pharpackage
                compression="gzip"
                destfile="${dir.dist}/${file.title}.phar"
                stub="${dir.temp}/${file.stub}"
                alias="${file.title}.phar"
                basedir="${dir.temp}"
                signature="sha512">
            <fileset refid="pharfiles"/>
            <metadata>
                <element name="version" value="${version}" />
                <element name="authors">
                    <element name="Marco Conti">
                        <element name="e-mail" value="github@marcoconti.org"/>
                    </element>
                </element>
            </metadata>
        </pharpackage>
        <chmod file="${dir.dist}/${file.title}.phar" mode="775"/>
    </target>

    <target name="deb:create" hidden="true">
        <mkdir dir="${dir.deb}/DEBIAN"/>
        <mkdir dir="${dir.deb}/lib/systemd/system"/>
        <mkdir dir="${dir.deb}/opt/${file.title}"/>
        <copy file="debian.control" tofile="${dir.deb}/DEBIAN/control"/>
        <copy file="${file.title}.service" tofile="${dir.deb}/lib/systemd/system/${file.title}.service"/>
        <copy file="${dir.dist}/${file.title}.phar" tofile="${dir.deb}/opt/${file.title}/${file.title}"/>
        <php expression="intval(round(intval((intval(filesize('dist/${file.title}.phar'))+intval(filesize('${file.title}.service')))/1024)))" returnProperty="size"/>
        <replaceregexp file="${dir.deb}/DEBIAN/control" match="DAEMONVERSION" replace="${version}"/>
        <replaceregexp file="${dir.deb}/DEBIAN/control" match="DAEMONSIZE" replace="${size}"/>
        <replaceregexp file="${dir.deb}/DEBIAN/control" match="DAEMONTITLE" replace="${file.title}"/>
        <exec executable="dpkg">
            <arg value="-b" />
            <arg value="${dir.deb}" />
            <arg value="${dir.dist}/${file.title}.deb" />
        </exec>
    </target>

    <target name="report:lint" hidden="true">
        <mkdir dir="${dir.report.lint}"/>
        <phplint haltonfailure="true" tofile="${dir.report.lint}/files.txt" level="verbose">
            <fileset refid="testfiles"/>
        </phplint>
    </target>

    <target name="report:phpunit" hidden="true">
        <mkdir dir="${dir.report.phpunit}"/>
        <!--<phpunit printsummary="true" configuration="phpunit.xml">-->
            <!--<formatter todir="${dir.report.phpunit}" type="xml"/>-->
            <!--<batchtest>-->
                <!--<fileset dir="tests">-->
                    <!--<include name="**/*Test*.php"/>-->
                <!--</fileset>-->
            <!--</batchtest>-->
        <!--</phpunit>-->
    </target>

    <target name="report:phpmd" hidden="true">
        <mkdir dir="${dir.report.phpmd}"/>
        <phpmd rulesets="codesize,unusedcode,naming">
            <fileset refid="testfiles"/>
            <formatter type="xml" outfile="${dir.report.phpmd}/pmd.xml"/>
            <formatter type="html" outfile="${dir.report.phpmd}/pmd.html"/>
            <formatter type="text" outfile="${dir.report.phpmd}/pmd.txt"/>
        </phpmd>
    </target>

    <target name="report:phpcs" hidden="true">
        <mkdir dir="${dir.report.phpcs}"/>
        <phpcodesniffer standard="PSR2" encoding="utf-8" docGenerator="HTML" docFile="${dir.report.phpcs}/rules.html">
            <fileset refid="testfiles"/>
            <formatter type="checkstyle" outfile="${dir.report.phpcs}/format.checkstyle.xml"/>
            <formatter type="xml" outfile="${dir.report.phpcs}/format.xml"/>
            <formatter type="summary" outfile="${dir.report.phpcs}/format.summary.txt"/>
            <formatter type="source" outfile="${dir.report.phpcs}/format.source.txt"/>
            <formatter type="csv" outfile="${dir.report.phpcs}/format.csv"/>
        </phpcodesniffer>
    </target>

    <target name="report:pdepend" hidden="true">
        <mkdir dir="${dir.report.pdepend}"/>
        <phpdepend>
            <fileset refid="testfiles"/>
            <logger type="jdepend-xml" outfile="${dir.report.pdepend}/jdepend.xml"/>
            <logger type="summary-xml" outfile="${dir.report.pdepend}/summary.xml"/>
            <logger type="jdepend-chart" outfile="${dir.report.pdepend}/chart.svg"/>
            <logger type="overview-pyramid" outfile="${dir.report.pdepend}/pyramid.svg"/>
            <analyzer type="coderank-mode" value="method"/>
        </phpdepend>
    </target>

    <target name="report:phpcpd" hidden="true">
        <mkdir dir="${dir.report.phpcpd}"/>
        <phpcpd>
            <fileset refid="testfiles"/>
            <formatter type="pmd" outfile="${dir.report.phpcpd}/format.cpd.xml"/>
            <formatter type="default" outfile="${dir.report.phpcpd}/format.default.txt"/>
        </phpcpd>
    </target>

    <target name="report:phploc" hidden="true">
        <mkdir dir="${dir.report.phploc}"/>
        <delete file="phploc.phar"/>
        <httpget dir="." url="https://phar.phpunit.de/phploc.phar" filename="phploc.phar" sslVerifyPeer="false" followRedirects="true"/>
        <phploc pharlocation="phploc.phar" reportName="${reports.title}">
            <fileset refid="testfiles"/>
            <formatter outfile="${dir.report.phploc}/phploc.xml" type="xml"/>
        </phploc>
        <delete file="phploc.phar"/>
    </target>

</project>